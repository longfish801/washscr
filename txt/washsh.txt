
【＃タイトル】washsh記法

■概要

　washsh記法は、washshスクリプトのための記法です。
　washshスクリプトは、テキストの整形に特化したスクリプトです。
　文法は【リンク：tpac記法：/gitdoc/tpac/tpac.html】をベースにしています。
　一部の処理には【リンク：clmap記法：/gitdoc/clmap/index.html】で記述したクロージャを使用します。

■構成

　ファイルに記述する場合、文字コードは UTF-8としてください。

　先頭に宣言をひとつ持ちます。
　タグ名は「washsh」です。
　スペース区切りで任意の名前を付与してください。名前は省略可です。

　宣言の次行から、タグを記述します。
　タグには範囲タグと整形タグの二種類があります。
　rangeタグ配下に範囲タグを指定します。
　範囲タグには、処理の対象としたい文字列の範囲を定義します。
　formatタグ配下に整形タグを指定します。
　整形タグには、範囲内の文字列をどう整形するか定義します。

----- コード -----
#! washsh 整形スクリプト
#> range
 ... 略 ...
#> format
 ... 略 ...
----- コード -----

　範囲タグで定義した範囲には、範囲名が付されます。
　範囲名は範囲タグの名前です。ただし maskタグのみ "masked"が範囲名となります
　範囲タグで定義していない箇所は、範囲名が空文字の範囲として扱います。

　rangeタグ、formatタグに名前は不要です。それぞれ最大ひとつ指定します。
　formatタグにはマップでキーinclude, excludeを指定できます。
　これは各整形タグの include,  excludeのデフォルト値となります。
　includeには処理対象とする範囲名を、excludeには処理対象外とする範囲名を記述します。
　リストで複数の範囲名を指定することも可能です。
　excludeにはマスキングのため、デフォルト値として "masked"が定義されます。
　excludeに "masked"を含めないよう設定すると、マスキングがされなくなるため注意してください。

　整形タグにはマップでキーinclude, excludeを指定できます。
　includeには処理対象とする範囲名を、excludeには処理対象外とする範囲名を記述します。
　リストで複数の範囲名を指定することも可能です。
　範囲名が以下の条件を両方とも満たす範囲に対して処理をします。

・includeが空、もしくは includeのいずれかひとつでも範囲名が一致する
・excludeのどれとも範囲名が一致しない

　各範囲には、範囲タグごとに独自のラベルを付与します。
　出力時、bgn, endラベルの値をそれぞれ開始行、終端行として出力します。
　これを変更したい場合は整形タグの callタグを利用してください。

■範囲タグ
□maskタグ

　maskタグでマスキングの範囲を定義します。
　maskタグに名前は不要です。最大ひとつ指定します。
　マスキングした範囲の範囲名は固定値 "masked"を付します。

　マップでキー bgn, endを指定します。bgnは必須です。
　bgnはマスキング開始行あるいはその正規表現を指定します。
　endはマスキング終端行あるいはその正規表現を指定します。
　end省略時は、終端行は開始行と同じ文字列とみなします。
　開始行、終端行は整形後の出力に含みません。

----- コード -----
#>> mask
#-bgn ／＊
#-end ＊／
----- コード -----

□dividedタグ

　dividedタグで区切り行に挟まれた範囲を定義します。
　dividedタグには名前が必須です。
　区切り行より後に、再び区切り行が存在しない場合はエラーとします。
　区切り行に挟まれた範囲を入れ子にすることはできません。

　マップでキー divを指定します。divは必須です。
　divは区切り行あるいはその正規表現を指定します。
　区切り行を整形したい場合は callタグの bgn, endを利用してください。

----- コード -----
#>> divided 囲み記事
#-div －－－
----- コード -----

　dividedタグによる範囲は、以下のラベルを持ちます。

・bgn : 区切り行
・end : 区切り行

□enclosedタグ

　enclosedタグで開始行と終端行に挟まれた範囲を定義します。
　enclosedタグには名前が必須です。
　開始行と終端行は異なる文字列である必要があります。
　開始行に対応する終端行が存在しない場合はエラーとします。
　開始行と終端行に挟まれた範囲を入れ子にすることができます。

　マップでキー bgn, endを指定します。bgn, endどちらも必須です。
　bgnは開始行あるいはその正規表現を指定します。
　endは終端行あるいはその正規表現を指定します。
　開始行、終端行を整形したい場合は callタグの bgn, endを利用してください。

----- コード -----
#>> enclosed コメント
#-bgn /*
#-end */
----- コード -----

　enclosedタグによる範囲は、以下のラベルを持ちます。

・bgn : 開始行
・end : 終端行

□treeタグ

　treeタグでツリー構造の範囲を定義します。
　ツリー構造はひとつの枝に複数の葉があり、それが入れ子になる構造です。
　treeタグには名前が必須です。
　枝の範囲名は treeタグの名前、葉の範囲名は treeタグの名前の後ろに "#elem"を付与したものになります。

　マップでキー level, escapeを指定します。level, escapeどちらも必須です。
　levelは、走査している行が葉の開始であれば、その階層を返すクロージャを指定します。
　クロージャをテキストで記述するか、clmap記法によるクロージャへの参照を指定します。
　引数は走査位置の行文字列です。
　戻り値として葉の開始でなければ -1を、そうでなければ階層（0始まり）を intで返してください。
　escapeは枝の終端か否か判定するクロージャを指定します。
　このクロージャは葉の開始行以降から呼びます。
　クロージャをテキストで記述するか、clmap記法によるクロージャへの参照を指定します。
　第一引数は行の位置、第二引数は走査終了位置、第三引数は階層、第四引数はすべての行のリストです。
　戻り値として終端位置か否か判定を booleanで返してください。

----- コード -----
#>> tree 箇条書き
#-level
import java.util.regex.Matcher;
{ String line ->
	if (!(line ==~ /(\t*)・.*/)) return -1;
	return Matcher.getLastMatcher().group(1).length();
}
#-escape
import java.util.regex.Matcher;
{ int idx, int endIdx, int level, List lines ->
	if (idx == endIdx) return true;
	if (lines[idx] == '' && !(lines[idx + 1] ==~ /(\t*)・.*/)) return true;
	int curLevel = (lines[idx + 1] ==~ /(\t*)・.*/)? Matcher.getLastMatcher().group(1).length() : -1;
	return (curLevel >= 0 && curLevel < level);
}
----- コード -----

　treeタグによる枝の範囲は、以下のラベルを持ちます。

・first : 先頭の葉の一行目
・level : 階層（0始まり）
・size : 葉の個数

　treeタグによる葉の範囲は、以下のラベルを持ちます。

・number : 何個目の葉か（1始まり）

■整形タグ
□replaceタグ

　replaceタグで固定文字列の置換処理を定義します。

　テキストで検索文字列、置換文字列をタブ区切りで指定します。
　改行区切りで検索文字列、置換文字列の組を複数指定できます。

----- コード -----
#>> replace
Hello	Goodbye
テスト	試験
----- コード -----

□reprexタグ

　reprexタグで正規表現の置換処理を定義します。

　テキストで検索文字列、置換文字列をタブ区切りで指定します。
　改行区切りで検索文字列、置換文字列の組を複数指定できます。

----- コード -----
#>> reprex
W([\w+])	w$1
----- コード -----

□callタグ

　callタグでクロージャによる整形処理を定義します。

　マップでキー bgn, end, textを指定します。bgn, end, textいずれも省略可です。省略時は加工をしません。
　bgn, endは開始行、終端行を加工するクロージャを指定します。
　クロージャをテキストで記述するか、clmap記法によるクロージャへの参照を指定します。
　引数はラベルです。
　戻り値として加工後の文字列を Stringで返してください。なお、nullを返すと行を削除します。
　textは範囲内の文字列を加工するクロージャを指定します。
　クロージャをテキストで記述するか、clmap記法によるクロージャへの参照を指定します。
　引数は、第一引数は範囲内の文字列を行毎に分割したリストです。各要素に改行コードは含みません。第二引数はラベルです。
　戻り値として加工後のリストを Listで返してください。なお、nullを返すと行を削除します。

----- コード -----
#>> call コラム
#-include コラム
#-bgn
{ Map labels -> return '【コラム：ここから】'; }
#-end
{ Map labels -> return '【コラム：ここまで】'; }
#-text
{ List lines, Map labels -> return lines.collect { "> ${it}" }; }
----- コード -----

以上
