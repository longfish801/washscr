#! tpac
#> case 00
#-script
	#! washsh
	#> range
	#>> tree 箇条書き
	#-level
	import java.util.regex.Matcher;
	{ String line ->
		if (!(line ==~ /(\t*)・.*/)) return -1;
		return Matcher.getLastMatcher().group(1).length();
	}
	#-escape
	import java.util.regex.Matcher;
	{ int idx, int endIdx, int level, List lines ->
		if (idx == endIdx) return true;
		if (lines[idx] == '' && !(lines[idx + 1] ==~ /(\t*)・.*/)) return true;
		int  curLevel = (lines[idx + 1] ==~ /(\t*)・.*/)? Matcher.getLastMatcher().group(1).length() : -1;
		return (curLevel >= 0 && curLevel < level);
	}
	#> format
	#>> replace
	#-include 箇条書き#elem
Hello	Goodbye
#-target
Hello, Washsh.

・Hello, Java.
　Hello, World.
・Hello, Groovy.

Hello, Washsh.
#-expected
Hello, Washsh.

・Goodbye, Java.
　Goodbye, World.
・Goodbye, Groovy.

Hello, Washsh.
#

#> case 01
#-script
	#! washsh
	#> range
	#>> tree 箇条書き
	#-level @/clmap:#cl('level#箇条書き')
	#-escape @/clmap:#cl('escape#箇条書き')
	#> format
	#>> replace
	#-include 箇条書き#elem
Hello	Goodbye
	#!!
	
	#! clmap
	#> dec
	import java.util.regex.Matcher;
	#> map level
	#>> args
	String line
	#>> closure 箇条書き
		if (!(line ==~ /(\t*)・.*/)) return -1;
		return Matcher.getLastMatcher().group(1).length();
	#> map escape
	#>> args
	int idx, int endIdx, int level, List lines
	#>> closure 箇条書き
		if (idx == endIdx) return true;
		if (lines[idx] == '' && !(lines[idx + 1] ==~ /(\t*)・.*/)) return true;
		int  curLevel = (lines[idx + 1] ==~ /(\t*)・.*/)? Matcher.getLastMatcher().group(1).length() : -1;
		return (curLevel >= 0 && curLevel < level);
#-target
Hello, Washsh.

・Hello, Java.
　Hello, World.
・Hello, Groovy.

Hello, Washsh.
#-expected
Hello, Washsh.

・Goodbye, Java.
　Goodbye, World.
・Goodbye, Groovy.

Hello, Washsh.
#

#> case 02
#-script
	#! washsh
	#> range
	#>> tree 箇条書き
	#-level
	import java.util.regex.Matcher;
	{ String line ->
		if (!(line ==~ /(\t*)[・～].*/)) return -1;
		return Matcher.getLastMatcher().group(1).length();
	}
	#-escape
	import java.util.regex.Matcher;
	{ int idx, int endIdx, int level, List lines ->
		if (idx == endIdx) return true;
		if (lines[idx] == '' && !(lines[idx + 1] ==~ /(\t*)[・～].*/)) return true;
		int  curLevel = (lines[idx + 1] ==~ /(\t*)[・～].*/)? Matcher.getLastMatcher().group(1).length() : -1;
		return (curLevel >= 0 && curLevel < level);
	}
	#> format
	#>> call
	#-include 箇条書き#elem
	#-bgn
	{ Map labels -> return labels.first; }
#-target
・Hello, Java.
～Hello, Groovy.
#-expected
・Hello, Java.
・Hello, Java.
～Hello, Groovy.
～Hello, Groovy.
#

